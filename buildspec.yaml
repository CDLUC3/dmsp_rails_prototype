# Build specifications for AWS CodeBuild
#   See: https://docs.aws.amazon.com/codebuild/latest/userguide/build-spec-ref.html

# Each input artifact is extracted to its own directory by CodePipeline, the locations of which
# are stored in environment variables. The directory for the primary source artifact (this repo)
# is made available with $CODEBUILD_SRC_DIR. The directory for the DMPTool push artifacts is
# made available with $CODEBUILD_SRC_DIR_dmptool-commit.

version: 0.2

phases:
  pre_build:
    commands:
      # Set some ENV variables here because CF only allows a limit of 1000 characters in the
      # EnvironmentVariable config for the Pipeline action :(
      - export AWS_VERSION=$(aws --version)

      # Display some info about the build environment
      - echo "CDLUC3/dmsp_rails_prototype dir -- ${CODEBUILD_SRC_DIR}"

      # Fetch the ECR repository name
      - echo $ECR_REPOSITORY_URI >> .ecr
      - export SHORT_ECR_URI=$(awk '{gsub("$ECR_REPOSITORY_NAME", "");print}' .ecr)
      - rm .ecr

      # Checkout the specified branch and run the tests
      - cd $CODEBUILD_SRC_DIR
      - git rev-parse --short HEAD
      - echo "Git Branch should be: ${GIT_BRANCH}"
      - git checkout $GIT_BRANCH
      - echo Running RSpec tests ...
      - bin/rails test

      # Set the repository URI to your ECR image and add an image tag with the first seven characters of the Git commit ID of the source.
      - echo Logging in to Amazon ECR ...
      - aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $SHORT_ECR_URI
      - IMAGE_TAG=${COMMIT_HASH:=latest}
  build:
    commands:
      # Build the Docker image and tag it
      - echo Build started on `date`
      - echo Building the Docker image...
      - cd $CODEBUILD_SRC_DIR
      - docker build -t $SHORT_ECR_URI:latest .
      - docker tag $ECR_REPOSITORY_URI:latest $SHORT_ECR_URI:$IMAGE_TAG
  post_build:
    commands:
      # Push the Docker image to the ECR repository. Fargate will pick it up an deploy automatically
      - echo Build completed on `date`
      - echo Pushing the Docker images...
      - cd $CODEBUILD_SRC_DIR
      - docker push $SHORT_ECR_URI:latest
      - docker push $SHORT_ECR_URI:$IMAGE_TAG
      - echo Writing image definitions file...
      - printf '[{"name":"dmptool","imageUri":"%s"}]' $ECR_REPOSITORY_URI:$IMAGE_TAG > dmptool_image.json
      - cat dmptool_image.json
